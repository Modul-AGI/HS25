{
  "hash": "6bb5cff6f5fee51eff8bf02fe04854a9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\noutput: false\necho: false                      # set to true to show solution\ncode-fold: true                 # set to true to show solution\ncode-summary: \"Musterlösung\"    \n---\n\n\n\n# Übung 5\n\nBevor du mit den Übungen anfägst, solltest du bereits eine eigene Conda Environment nach der Anleitung in Kapitel \"@sec-conda\" erstellt haben.\n\n## Übung 5.1 {#sec-functions1-ex-gruezi}\n\nErstelle eine Function, die `gruezi` heisst, einen Nachnamen als Input annimmt und per Sie grüsst. \n\n\n\n::: {#c38ba682 .cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\n# Das Resultat soll in etwa folgendermassen aussehen:\ngruezi(nachname = \"van Rossum\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'Guten Tag, van Rossum'\n```\n:::\n:::\n\n\n## Übung 5.2 {#sec-gruezi2}\n\nErstelle eine neue Funktion `gruezi2` welche im Vergleich zu `gruezi` einen weiteren Parameter namens `anrede` annimmt. \n\n\n\n::: {#d7cba4b3 .cell execution_count=4}\n``` {.python .cell-code code-fold=\"false\"}\n# Das Resultat soll in etwa folgendermassen aussehen:\ngruezi2(nachname = \"van Rossum\", anrede = \"Herr\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'Guten Tag, Herr van Rossum'\n```\n:::\n:::\n\n\n## Übung 5.3\n\nErstelle eine Funktion `add` die zwei Zahlen summiert.\n\n\n\n::: {#3559fc22 .cell execution_count=6}\n``` {.python .cell-code code-fold=\"false\"}\n# Das Resultat sollte folgendermassen aussehen:\nadd(zahl1 = 2, zahl2 = 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n12\n```\n:::\n:::\n\n\n## Übung 5.4\n\nErstelle eine Funktion `square`, welche den Input quadriert.\n\n\n\n::: {#9df9d635 .cell execution_count=8}\n``` {.python .cell-code code-fold=\"false\"}\n# Das Resultat sollte folgendermassen aussehen:\nsquare(zahl = 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n25\n```\n:::\n:::\n\n\n## Übung 5.5\n\nErstelle eine Funktion `meter_zu_fuss`, die eine beliebige Zahl von Meter in Fuss konvertiert. Zur Erinnerung: 30.48 cm ergeben 1 Fuss. \n\n\n\n::: {#4428f44e .cell execution_count=10}\n``` {.python .cell-code code-fold=\"false\"}\n# Das Resultat sollte folgendermassen aussehen:\n\nmeter_zu_fuss(meter = 1.80)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n5.905511811023622\n```\n:::\n:::\n\n\n",
    "supporting": [
      "5_Uebung_5_files"
    ],
    "filters": [],
    "includes": {}
  }
}