{
  "hash": "3e281a15687a7464f768eaaf7a65641f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\noutput: false\necho: false                      # set to true to show solution\ncode-fold: true                  # set to true to show solution\ncode-summary: \"Musterlösung\"    \n---\n\n\n\n\n# Übung 8\n\nNun wollen wir diesen Zufallszahlengenerator `random` nutzen um eine Funktion zu entwickeln, welche einen beliebigen Punkt (mit einer x-/y-Koordinate) zufällig in einem definierten Umkreis verschiebt. Unser Fernziel ist es, den simulierten Datensatz aus  \"Datenqualität und Unsicherheit\" zu rekonstruieren (siehe unten). Der erste Schritt dorthin ist es, einen gemeldeten Punkt (rot in @fig-arcgiszecken) in einem definierten Umkreis zu verschieben.\n\n![Ausschnitt der simulierten Zeckenstiche. Der rote Punkt stellt jeweils den gemeldeten Zeckenstich dar, die blaue Punktwolke drum herum sind simulierte Punkte welche die Ungenauigkeit der Daten wiederspiegelt.](figures/arcgiszecken.jpg){#fig-arcgiszecken}\n\nDas Ziel dieser Übung ist es also, dass wir eine Funktion entwickeln, die uns einen zufälligen Punkt in der Nähe eines Ursprungspunktes vorschlägt. Unser Vorgehen: Wir addieren jedem Koordinatenwert (`x`/`y`) des Ursprungspunktes einen Zufallswert, zum Beispiel zwischen -100 bis +100.\n\n<!-- % Zufallszahlen aus Uniformverteilung -->\n## Übung 8.1\n\nBevor wir mit Koordinaten arbeiten wollt ihr euch zuerst mit dem Modul `random` vertraut machen. Importiere das Modul `random` und generiere eine Zufallszahl zwischen -100 und +100 aus einer uniformen Verteilung sowie aus einer Normalverteilung mit Mittelwert 100 und Standartabweichung 20.\n\n\n\n<!-- % Dummykoordinaten erstellen -->\n## Übung 8.2\n\nNun wollen wir uns den Koordinaten zuwenden. Erstelle als erstes zwei Dummykoordinaten `x_start` und `y_start` mit jeweils dem Wert `0`. Diese sollen als \"Ursprungskoordinaten\" dienen.\n\n\n\n## Übung 8.3\n\nGeneriere nun eine Zufallszahl, die aus einer Normalverteilung stammt und die *in etwa* zwischen -100 und +100 liegt. Weise diese Zahl der Variabel `x_offset` zu.\nGeneriere danach eine zweite Zufallszahl (auf die gleiche Art) und weise diese `y_offset` zu.\n\n:::{.callout-note collapse=\"true\"}\n\nÜberlege dir, welcher *Mittelwert* Sinn macht um Werte zwischen -100 und +100 zu bekommen. Welche Zahl liegt zwischen -100 und +100?\n\nÜberlege dir als nächstes, welche Standartabweichung sinnvoll wäre. Zur Erinnerung: Etwa 68% der Werte liegen inerhalb von +/- 1 Standartabweichung (SD), 95% innerhalb von +/- 2 SD, 99% innerhalb von 3 SD (siehe unten):\n\n![Normalverteilung und die Anteile innerhalb von 1 Standartabweichung (Mittelwert $\\mu$ minus Standartabweichung $\\sigma$), 2 Standartabweichungen ($\\mu - 2\\times\\sigma)$ und 2 Standartabweichungen ($\\mu - 3\\times\\sigma)$. Quelle: [cobocards](https://www.cobocards.com/)](figures/normalverteilung.jpg){#fig-normal}\n\n:::\n\n\n\n## Übung 8.4\n\nAddiere nun die Zufallszahlen `x_offset` und `y_offset` **jeweils** zu den Dummykoordinaten `x_start` und `y_start` und weise diese neuen Koordinaten `x_neu` und `y_neu` zu. Die neuen Werte stellen die leicht verschobenen Ursprungskoordinaten dar. In meinem Fall sind diese um 10.2 Meter nach Osten (positiver Wert) bzw. 4.4 Meter nach Süden (negativer Wert) verschoben worden.\n\n\n\n::: {#e18d39f6 .cell execution_count=5}\n``` {.python .cell-code code-fold=\"false\"}\nx_neu\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n10.246170309600945\n```\n:::\n:::\n\n\n::: {#584184ed .cell execution_count=6}\n``` {.python .cell-code code-fold=\"false\"}\ny_neu\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n-4.443904000288846\n```\n:::\n:::\n\n\n::: {#6701cad2 .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Code für die Visualisierung (nur FYI)\"}\nimport pandas as pd\n\nmypoints = pd.DataFrame({\n    \"x\": [x_start, x_neu],\n    \"y\": [y_start, y_neu],\n    \"typ\": [\"start\", \"neu\"]\n    }\n)\n\nfrom matplotlib import pyplot as plt\n\nmypoints.plot(\"x\", \"y\", kind = \"scatter\", xlim = [-100, 100], ylim = [-100, 100], c = [\"red\", \"blue\"], title = \"Ursprung (rot) und Simulation (blau)\")\n```\n\n::: {.cell-output .cell-output-display}\n![](11_Uebung_8_files/figure-html/cell-8-output-1.png){width=617 height=449}\n:::\n:::\n\n\n## Übung 8.5 {#sec-ex-offset-function}\n\nNun haben wir das zufällige Verschieben eines Einzelpunktes am Beispiel einer Dummykoordinaten (`0`/`0`) durchgespielt. In der nächsten Aufgabe (@sec-offset-dataframe) werden wir *alle* unsere Zeckenstichkoordinaten auf diese Weise zufällig verschieben um einen simulierten Zeckenstichdatensatz ähnlich wie @fig-arcgiszecken zu erhalten. \n\nDafür brauchen wir die eben erarbeiteten Einzelschritte als Funktion, um diese auf alle Zeckenstiche anwenden zu können. \n\nErstelle jetzt eine Funktion namens `offset_coordinate` welche als Input eine `x` *oder* `y`-Achsenwert annimmt und eine leicht verschobene Wert zurückgibt.** Integriere die Standartabweichung der Verteilung als optionalen Parameter mit dem Namen `distance` und einem Defaultwert von 100.\n\n\n\n::: {#eb44f265 .cell execution_count=9}\n``` {.python .cell-code code-fold=\"false\"}\n# die Funktion sollte so funktionieren:\noffset_coordinate(x_start)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n10.9378164245929\n```\n:::\n:::\n\n\n## Übung 8.6 {#sec-offset-vis}\n\nNun ist es wichtig, dass wir unser Resultat visuell überprüfen. Im Beispiel unten wende ich die in der letzten Übung erstellte Funktion `offset_coordinate()` 1'000 mal auf die Dummykoordinate an. Nutze *deine* Funktion `offset_coordinate` um eine Visualisierung gemäss untenstehendem beispiel zu machen.\n\n::: {#c2242a4e .cell execution_count=10}\n``` {.python .cell-code code-fold=\"false\"}\nx_neu_list = [offset_coordinate(x_start) for i in range(1, 1000)]\ny_neu_list = [offset_coordinate(y_start) for i in range(1, 1000)]\n\n# Liste in eine Pandas DataFrame überführen\nmysim = pd.DataFrame({\"x\" : x_neu_list, \"y\" : y_neu_list})\n\nmysim.plot(\"x\", \"y\", kind = \"scatter\")\n\nfrom matplotlib import pyplot as plt\nplt.axis(\"equal\")\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(np.float64(-342.8016610358932),\n np.float64(344.8492268813678),\n np.float64(-390.96253345109847),\n np.float64(434.9539710663838))\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](11_Uebung_8_files/figure-html/cell-11-output-2.png){width=604 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "11_Uebung_8_files"
    ],
    "filters": [],
    "includes": {}
  }
}