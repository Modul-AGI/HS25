{
  "hash": "44a0ea23680ed3434a6b871fb5d77b16",
  "result": {
    "engine": "jupyter",
    "markdown": "## Zufallszahlen generieren {#sec-random-numbers}\n\nIm Block \"*Datenqualität und Unsicherheit*\" habt ihr euch bereits mit Zufallszahlen und Simulationen auseinandergesetzt. Programmiersprachen sind für eine solche Anwendung sehr gut geeignet, und deshalb werden wir in diesem Abschnitt eine Erweiterung zur Erstellung von Zufallszahlen kennenlernen. Diese Erweiterung lautet `random` und ist Teil der [\"Python Standard Library\"](https://en.wikibooks.org/wiki/Python_Programming/Standard_Library), was bedeutet das dieses Erweiterung bereits installiert ist, und wir sie nicht installieren müssen. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport random\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nrandom.seed(2)\n```\n:::\n\n\nInnerhalb vom `random` gibt es zahlreiche Funktionen um Zufallszahlen zu generieren, je nachdem was unsere Anforderungen an die Zufallszahl ist. Eine Anforderung könnte zum Beispiel sein, dass die Zahl innerhalb eines bestimmten Bereichs luegen soll (z.B. \"*generiere eine Zufallszahl zwischen 1 und 9*\"). Oder aber, dass sie eine ganze Zahl sein muss. Weiter könnte die Anforderung sein, dass sie aus einer bestimmten Verteilung kommen sollte, zum Beispiel einer Normalverteilung. In diesem letzten Fall müssen wir den Mittlwert sowie die Standartabweichung unserer Verteilung angeben.\n\nUm eine ganzzahlige Zufallszahl zwischen 1 und 9 zu generieren, können wir die Funktion `randrange()` nutzen:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nrandom.randrange(start = 1, stop = 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n1\n```\n:::\n:::\n\n\nWenn wir auf diese Weise mit `randrange()` immer wieder neue Zufallszahlen generieren fällt auf, dass die Verteilung der Zahlen ziemlich gleichmässig ist. Es ist also gleich wahrscheinlich eine 9 zu bekommen, wie eine 1 oder eine 5. Die Zahlen kommen also aus einer \"uniformen\" Verteilung. Um dies zu verdeutlichen generiere ich in den folgenden Codezeilen 500 Zufallszahlen zwischen 1 und 9 mit der Funktion `randrange` und visualisiere die Häufigkeit der einzelnen Zahlen in einem Histogramm. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# erstellt eine Liste von Zufallszahlen 1 - 9\n# (lernen wir zu einem späteren Zeitpunkt)\na = [random.randrange(1, 10) for x in range(500)]\n\nimport pandas as pd\n\n# visualisiert die zufällig generierten Zahl in Form \n# eines Histogramms (lernen wir ebenfalls später)\npd.Series(a).plot(kind = \"hist\", bins = range(1, 11), edgecolor = \"black\", align = \"left\", xticks = range(1, 10))\n```\n\n::: {.cell-output .cell-output-display}\n![](10_Zufallzahlen_files/figure-pdf/cell-5-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nDie Funktion `randrange()` generiert nur ganzzahlige Zufallszahlen. Wenn wir aber eine Zufallszahl mit Nachkommastellen brauchen, verwenden wir die Funktion `uniform()`. \n\nUm Zufallszahlen aus einer \"Normalverteilung\" zu erhalten, verwenden wir die Funktion `normalvariate`. Hier müssen wir den Mittelwert und die Standartabweichung dieser Verteilung angeben. Tatsächlich können wir bei dieser Variante keine Minimum- und Maximumwerte festlegen: Theoretisch könnte der Generator jeden erdenklichen Zahlenwert rausspucken, am wahrscheinlichsten ist jedoch eine Zahl nahe am angegebenen Mittelwert.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# mu = Mittelwert, sigma = Standartabweichung\nrandom.normalvariate(mu = 5, sigma = 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2.5056884809480864\n```\n:::\n:::\n\n\nWenn wir die obige Funktion 10'000x laufen lassen und uns das Histogramm der generierten Zahlen anschauen, dann zeichnet sich folgendes Bild ab. \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nb = [random.normalvariate(mu = 5, sigma = 2) for b in range(10000)]\npd.Series(b).plot(kind = \"hist\", bins = 30, edgecolor = \"black\")\n```\n\n::: {.cell-output .cell-output-display}\n![](10_Zufallzahlen_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "10_Zufallzahlen_files/figure-pdf"
    ],
    "filters": []
  }
}