{
  "hash": "29669b1c5663fe1e241f2bcc2cdf873d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\noutput: false\necho: false                      # set to true to show solution\ncode-fold: true                  # set to true to show solution\ncode-summary: \"Musterlösung\"    \n---\n\n\n\n\n\n# Übung 8\n\n## Übung 8.1 {#sec-ex-ifelse-gruezi2}\n\nErstelle eine neue Funktion `gruezi3` die `gruezi` (aus @sec-functions1-ex-gruezi) um einem weiteren Parameter `uhrzeit` erweitert. Die Funktion soll vor 18 Uhr (`uhrzeit < 18`) mit \"Guten Tag\" und sonst mit \"Guten Abend\" grüssen. Um es einfach zu halten: Die Zeitangbe muss in Dezimalzahlen erfolgen (also nicht `20:15 Uhr` sondern `20.25`).\n\n\n\n::: {#16f96d16 .cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\n# die Lösung sollte etwa folgendermasssen funktionieren:\n\ngruezi3(\"Guido\", uhrzeit = 21)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n'Guten Abend Guido'\n```\n:::\n:::\n\n\n## Übung 8.2\n\nErweitere die Funktion `gruezi2` so, dass zwischen folgende Uhrzeiten berücksichtigt werden:\n\n| Uhrzeit  | Begrüssungsform | \n|:---|:---|:---|\n| 5 bis 11 Uhr  | Guten Morgen |\n| 11 bis 18 Uhr  | Guten Tag |\n| 18 bis 22 Uhr  | Guten Abend |\n| 22 bis 5 Uhr  | Gute Nacht |\n\n: Uhrzeiten und ihre Begrüssungsformen {#tbl-begruesung}\n\nDas Problem ist etwas schwierig zu Packen weil wir die \"von - bis\" Uhrzeiten in eine Ja/Nein Logik überführen müssen. Überlege dir zuerst eine Ausführungslogik und schreibe danach die `if`, `elif`und `else` Operationen. Hier unser Vorschlag:\n\n\n\n\n\n\n\n```{mermaid}\ngraph LR\n    A[uhrzeit < 5] \n    A-->|yes| B[Gute Nacht]\n    A-->|no| C[Uhrzeit < 11]\n    C-->|yes| D[Guten Morgen]\n    C-->|no| E[Uhrzeit < 18]\n    E-->|yes| F[Guten Tag]\n    E-->|no| G[Uhrzeit < 22]\n    G-->|yes| H[Guten Abend]\n    G-->|no| I[Gute Nacht]\n``` \n\n\n\nTeste die Funktion mit verschiedenen Optionen um sicherzustellen, dass sie richtig funktioniert.\n\n## Übung 8.3\n\nErweitere die Funktion `bmi` aus @sec-ex-functions-bmi so, dass statt dem berechneten BMI der \"Nutritional status\" aufgrund der [WHO Klassifizierung](https://www.euro.who.int/en/health-topics/disease-prevention/nutrition/a-healthy-lifestyle/body-mass-index-bmi) ausgegeben wird:\n\n| BMI  | Nutritional status | \n|:---|:---|\n| Below 18.5  | Underweight |\n| 18.5–24.9  | Normal weight |\n| 25.0–29.9  | Pre-obesity |\n| 30.0–34.9  | Obesity class I |\n| 35.0–39.9  | Obesity class II |\n| Above 40  | Obesity class III |\n\n: WHO Nutritional status {#tbl-who-bmi}\n\n\n\n::: {#13aa7f64 .cell execution_count=5}\n``` {.python .cell-code code-fold=\"false\"}\n# Der Output sollte etwa folgedermassen aussehen\nbmi2(1.7, 70)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n'Who classification: Normal weight'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "9_Uebung_8_files"
    ],
    "filters": [],
    "includes": {}
  }
}