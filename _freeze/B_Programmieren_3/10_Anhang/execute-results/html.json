{
  "hash": "37fb27f64ff33e68f88cd4a8292613dd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\necho: true\n---\n\n# Anhang\n\n## Anhang 1: Daten visualisieren {#sec-viz}\n\nEs ist äusserst Zentral, Daten regelmässig und oft zu visualisieren. Die *de facto* standart Library hierfür in Python ist `matplotlib`. Diese Library kann man direkt ansteuern wie in [diesem Tutorial](https://matplotlib.org/stable/tutorials/introductory/usage.html) beschrieben wird. Wir verwenden die library jedoch etwas anders: Dabei nutzen wir die Tatsache aus, dass sowohl `pandas` wie auch `geopandas` eingebaute Methoden (*methods*) haben um deren Inhalte zu visualisieren. Die Methode heisst in beiden Fällen `.plot()`, wie wir weiter unten noch sehen werden.\n\n### Histogramm aus `List`\n\n`pandas` vereinfacht das Visualisieren von Daten sogar soweit, dass es sich jewils lohnt seine Listen, Dictionaries usw. zuerst in eine `Series` oder `DataFrame` zu überführen um sie zu visualisieren (wie ich zum Beispiel in @sec-random-numbers jeweils gemacht habe). \n\n::: {#f46e3888 .cell execution_count=1}\n``` {.python .cell-code}\nimport random\nimport pandas as pd\n\nrandom_gamma = [random.gammavariate(1, 1) for x in range(1000)]\n\nrandom_gamma = pd.Series(random_gamma)\n\nrandom_gamma.plot(kind = \"hist\", bins = 50)\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'pandas'\n```\n:::\n:::\n\n\nWeitere Beispiele zu Histogrammen aus Listen findet ihr im Kapitel @sec-random-numbers .\n\n### Boxplot aus `List`\n\nDas Visualisieren als Boxplot ist sehr ähnlich, man ersetzt `\"hist\"` lediglich durch `\"box`. Eine komplette liste der möglichen Argumente für findet ihr hier: <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.html>\n\n::: {#57300b71 .cell execution_count=2}\n``` {.python .cell-code}\nrandom_gamma.plot(kind = \"box\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'random_gamma' is not defined\n```\n:::\n:::\n\n\n### Scatterplot aus DataFrame\n\nUm einen Scatterplot zu erstellen, braucht es eine `DataFrame` (eine `Series` reicht hierfür nicht aus).\n\n::: {#d2f40cd6 .cell execution_count=3}\n``` {.python .cell-code}\nzeckenstiche = pd.read_csv(\"data/zeckenstiche.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'pd' is not defined\n```\n:::\n:::\n\n\n::: {#9eb3c010 .cell execution_count=4}\n``` {.python .cell-code}\nzeckenstiche.plot(\"x\", \"y\", kind = \"scatter\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'zeckenstiche' is not defined\n```\n:::\n:::\n\n\n### Statische Karte aus GeoDataFrame\n\nUm aus *GeoDataFrames* Karten zu machen verwendet man ebenfalls die `.plot()` Methode. Um wirklich schöne Karten mit Python herzustellen braucht man viel Übung. Für eine schnelle Visualisierung reicht aber die `.plot()` Methode.\n\n::: {#131a84dd .cell execution_count=5}\n``` {.python .cell-code}\nimport geopandas as gpd\n\nzeckenstiche = gpd.read_file(\"data/zeckenstiche.gpkg\")\nwald = gpd.read_file(\"data/wald.gpkg\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'geopandas'\n```\n:::\n:::\n\n\n**Einfache Plots ohne anpassung:**\n\n::: {#80bef8e5 .cell execution_count=6}\n``` {.python .cell-code}\nwald.plot()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'wald' is not defined\n```\n:::\n:::\n\n\n**Anpassung der Plot Grösse:**\n\n::: {#0e5bfb5b .cell execution_count=7}\n``` {.python .cell-code}\nwald.plot(figsize = (5,5))\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'wald' is not defined\n```\n:::\n:::\n\n\n**Choroplethenkarte Karte**\n\n::: {#ddb5c01a .cell execution_count=8}\n``` {.python .cell-code}\nfrom matplotlib.colors import ListedColormap\n\nmy_cmap = ListedColormap([\"green\",\"lightgrey\"])\nwald.plot(column = \"Wald_text\", legend = True, cmap = my_cmap)\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'matplotlib'\n```\n:::\n:::\n\n\n**Mehrere Layers:**\n\n::: {#dc57846b .cell execution_count=9}\n``` {.python .cell-code}\nbase = wald.plot(column = \"Wald_text\", legend = True, cmap = my_cmap)\nzeckenstiche.plot(color = \"Red\", ax = base)\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'wald' is not defined\n```\n:::\n:::\n\n\n### Interaktive Karten aus GeoDataFrame\n\nWeitere Informationen dazu findet ihr hier: <https://geopandas.org/docs/user_guide/interactive_mapping.html>\n\nVollautomatisch, ohne Anpassungen:\n\n::: {#95b88a2c .cell execution_count=10}\n``` {.python .cell-code}\nzeckenstiche.explore()\n```\n:::\n\n\nZeckenstiche Rot eingefärbt:\n\n::: {#dad5efb4 .cell execution_count=11}\n``` {.python .cell-code}\nzeckenstiche.explore(color = \"red\")\n```\n:::\n\n\nZeckenstiche nach `\"accuracy\"` eingefärbt:\n\n::: {#14e6833b .cell execution_count=12}\n``` {.python .cell-code}\nzeckenstiche.explore(column = \"accuracy\")\n```\n:::\n\n\nWald nach `\"Wald_text\"` eingefärbt (beachte, dass ich `my_cmap` weiter oben erstellt habe!):\n\n::: {#1525493f .cell execution_count=13}\n``` {.python .cell-code}\nwald.explore(column = \"Wald_text\", cmap = my_cmap)\n```\n:::\n\n\nZwei übereinander gelagerte Layers:\n\n::: {#03569ca0 .cell execution_count=14}\n``` {.python .cell-code}\nbase = wald.explore(column = \"Wald_text\", cmap = my_cmap)\nzeckenstiche.explore(m = base, color = \"red\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'wald' is not defined\n```\n:::\n:::\n\n\n## Anhang 2: Geodaten visualisieren {#sec-geoviz}\n\nIn folgenden Beispielen zeigen wir noch ein paar einfache Wege, wie ihr die Zeckenstichdaten visualisieren könnt.\n\n::: {#1c7ba3af .cell execution_count=15}\n``` {.python .cell-code}\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport descartes\n\nwald = gpd.read_file(\"data/wald.gpkg\")\nzeckenstiche_full = pd.read_csv(\"data/zeckenstiche_full.csv\")\n\ngeom = gpd.points_from_xy(zeckenstiche_full['x'], zeckenstiche_full['y'])\n\nzeckenstiche_gpd = gpd.GeoDataFrame(\n    zeckenstiche_full,\n    geometry=geom,\n    crs = 2056)\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'pandas'\n```\n:::\n:::\n\n\n### Kernel Density Plot\n\nMit der Erweiterung `seaborn` lassen sich mit wenigen Zeilen Code eine *Kernel Density* rechnen und visualisieren. Siehe nachstehenden Code:\n\n::: {#a35f8f7a .cell execution_count=16}\n``` {.python .cell-code}\nimport seaborn as sns\n\nf, ax = plt.subplots(1, figsize=(6, 6))\nwald.boundary.plot(linewidth=0.1, ax=ax)\nzeckenstiche_gpd.plot(color='red', linewidth=0.1, ax=ax)\n\nsns.kdeplot(x = zeckenstiche_full.x, y= zeckenstiche_full.y,shade = False,n_levels = 10, cmap = \"viridis\", ax = ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'seaborn'\n```\n:::\n:::\n\n\n### Hintergrundkarte\n\nMit der Erweiterung `contextily` kann man sehr schnell und einfach Hintergrundkarten in den Plot einbinden. Dafür muss das *GeoDataFrame* vorher aber in WGS84 Koordinaten (EPSG 3857) konvertiert werden (mit `to_crs`, s.u.).\n\n::: {#a8fff49c .cell execution_count=17}\n``` {.python .cell-code}\nimport contextily as ctx\n\nf, ax = plt.subplots(1, figsize=(6, 6))\nzeckenstiche_gpd.to_crs(epsg = 3857).plot(ax = ax)\nctx.add_basemap(ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'contextily'\n```\n:::\n:::\n\n\n### KDE mit Hintergrundkarte\n\nKernel Denisty und Hintergrundkarte können auch kombiniert werden:\n\n::: {#03be61d5 .cell execution_count=18}\n``` {.python .cell-code}\nlat = zeckenstiche_gpd.to_crs(epsg = 3857).geometry.x\nlng = zeckenstiche_gpd.to_crs(epsg = 3857).geometry.y\n\nf, ax = plt.subplots(1, figsize=(6, 6))\n\nsns.kdeplot(x = lat,y = lng,shade = False,n_levels = 25, cmap = \"viridis\", ax = ax)\nctx.add_basemap(ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'zeckenstiche_gpd' is not defined\n```\n:::\n:::\n\n\n",
    "supporting": [
      "10_Anhang_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}