{
  "hash": "b611ddd5e971d8605327081623643fd4",
  "result": {
    "engine": "jupyter",
    "markdown": "# Dictionaries\n\nIn den letzten Übungen haben wir einen Fokus auf Listen gelegt. Nun wollen wir ein besonderen Fokus auf den Datentyp *Dictionary* legen.\n\nÄhnlich wie eine List ist eine Dictionary ein Behälter, wo mehrere Elemente abgespeichert werden können. Wie bei einem Wörterbuch bekommt jedes Element ein \"Schlüsselwort\", mit dem man den Eintrag finden kann. \nUnter dem Eintrag \"trump\" findet man im Langenscheidt Wörterbuch (1977) die Erklärung \"erdichten, schwindeln, sich aus den Fingern saugen\".  \n\n![](figures/trump.jpg)\n\nIn Python würde man diese *Dictionary* folgendermassen erstellen:\n\n::: {#7e2491b5 .cell execution_count=1}\n``` {.python .cell-code}\nlangenscheidt = {\"trump\":\"erdichten- schwindeln- sich aus den Fingern saugen\"}\n```\n:::\n\n\nSchlüssel (von nun an mit *Key* bezeichnet) des Eintrages lautet \"trump\" und der dazugehörige Wert (*Value*) \"erdichten- schwindeln- aus den Fingern saugen\". Beachte die geschweiften Klammern (`{` und `}`) bei der Erstellung einer *Dictionary*.\n\nEine *Dictionary* besteht aber meistens nicht aus einem, sondern aus mehreren Einträgen: Diese werden Kommagetrennt aufgeführt. \n\n::: {#6eb50290 .cell execution_count=2}\n``` {.python .cell-code}\nlangenscheidt = {\"trump\":\"erdichten- schwindeln- sich aus den Fingern saugen\", \"trumpery\":\"Plunder- Ramsch- Schund\"}\n```\n:::\n\n\nDer Clou der *Dictionary* ist, dass man nun einen Eintrag mittels dem *Key* aufrufen kann. Wenn wir also nun wissen wollen, was \"trump\" heisst, ermitteln wir dies mit der nachstehenden Codezeile:  \n\n::: {#9efbec7b .cell execution_count=3}\n``` {.python .cell-code}\nlangenscheidt[\"trump\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'erdichten- schwindeln- sich aus den Fingern saugen'\n```\n:::\n:::\n\n\nUm eine *Dictionary* mit einem weiteren Eintrag zu ergänzen, geht man sehr ähnlich vor wie beim Abrufen von Einträgen. \n\n::: {#c9ccfba4 .cell execution_count=4}\n``` {.python .cell-code}\nlangenscheidt[\"trumpet\"] = \"trompete\" \n```\n:::\n\n\nEin *Key* kann auch mehrere Einträge enthalten. An unserem Langenscheidt Beispiel: Das Wort \"trump\" ist zwar eindeutig, doch \"trumpery\" hat vier verschiedene Bedeutungen. In so einem Fall können wir einem Eintrag auch eine *List* von Werten zuweisen. Beachte die eckigen Klammern und die Kommas, welche die Listeneinträge voneinander trennt.\n\n::: {#9b0609a5 .cell execution_count=5}\n``` {.python .cell-code}\nlangenscheidt[\"trumpery\"] = [\"Plunder- Ramsch- Schund\", \n                             \"Gewäsch- Quatsch\", \n                             \"Schund- Kitsch\", \n                             \"billig- nichtssagend\"]    \nlangenscheidt[\"trumpery\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n['Plunder- Ramsch- Schund',\n 'Gewäsch- Quatsch',\n 'Schund- Kitsch',\n 'billig- nichtssagend']\n```\n:::\n:::\n\n\n::: {#2d237cc2 .cell execution_count=6}\n``` {.python .cell-code}\nlen(langenscheidt[\"trumpery\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n4\n```\n:::\n:::\n\n\n",
    "supporting": [
      "8_Dictionary_files"
    ],
    "filters": [],
    "includes": {}
  }
}