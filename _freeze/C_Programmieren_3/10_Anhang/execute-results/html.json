{
  "hash": "37fb27f64ff33e68f88cd4a8292613dd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\necho: true\n---\n\n\n\n\n# Anhang\n\n## Anhang 1: Daten visualisieren {#sec-viz}\n\nEs ist äusserst Zentral, Daten regelmässig und oft zu visualisieren. Die *de facto* standart Library hierfür in Python ist `matplotlib`. Diese Library kann man direkt ansteuern wie in [diesem Tutorial](https://matplotlib.org/stable/tutorials/introductory/usage.html) beschrieben wird. Wir verwenden die library jedoch etwas anders: Dabei nutzen wir die Tatsache aus, dass sowohl `pandas` wie auch `geopandas` eingebaute Methoden (*methods*) haben um deren Inhalte zu visualisieren. Die Methode heisst in beiden Fällen `.plot()`, wie wir weiter unten noch sehen werden.\n\n### Histogramm aus `List`\n\n`pandas` vereinfacht das Visualisieren von Daten sogar soweit, dass es sich jewils lohnt seine Listen, Dictionaries usw. zuerst in eine `Series` oder `DataFrame` zu überführen um sie zu visualisieren (wie ich zum Beispiel in @sec-random-numbers jeweils gemacht habe). \n\n::: {#fef06fab .cell execution_count=1}\n``` {.python .cell-code}\nimport random\nimport pandas as pd\n\nrandom_gamma = [random.gammavariate(1, 1) for x in range(1000)]\n\nrandom_gamma = pd.Series(random_gamma)\n\nrandom_gamma.plot(kind = \"hist\", bins = 50)\n```\n\n::: {.cell-output .cell-output-display}\n![](10_Anhang_files/figure-html/cell-2-output-1.png){width=593 height=411}\n:::\n:::\n\n\nWeitere Beispiele zu Histogrammen aus Listen findet ihr im Kapitel @sec-random-numbers .\n\n### Boxplot aus `List`\n\nDas Visualisieren als Boxplot ist sehr ähnlich, man ersetzt `\"hist\"` lediglich durch `\"box`. Eine komplette liste der möglichen Argumente für findet ihr hier: <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.html>\n\n::: {#c09097bb .cell execution_count=2}\n``` {.python .cell-code}\nrandom_gamma.plot(kind = \"box\")\n```\n\n::: {.cell-output .cell-output-display}\n![](10_Anhang_files/figure-html/cell-3-output-1.png){width=558 height=393}\n:::\n:::\n\n\n### Scatterplot aus DataFrame\n\nUm einen Scatterplot zu erstellen, braucht es eine `DataFrame` (eine `Series` reicht hierfür nicht aus).\n\n::: {#350b289d .cell execution_count=3}\n``` {.python .cell-code}\nzeckenstiche = pd.read_csv(\"data/zeckenstiche.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">FileNotFoundError</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> zeckenstiche <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_csv</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">data/zeckenstiche.csv</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026</span>, in <span class=\"ansi-cyan-fg\">read_csv</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1013</span> kwds_defaults <span style=\"color:rgb(98,98,98)\">=</span> _refine_defaults_read(\n<span class=\"ansi-green-fg ansi-bold\">   1014</span>     dialect,\n<span class=\"ansi-green-fg ansi-bold\">   1015</span>     delimiter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1022</span>     dtype_backend<span style=\"color:rgb(98,98,98)\">=</span>dtype_backend,\n<span class=\"ansi-green-fg ansi-bold\">   1023</span> )\n<span class=\"ansi-green-fg ansi-bold\">   1024</span> kwds<span style=\"color:rgb(98,98,98)\">.</span>update(kwds_defaults)\n<span class=\"ansi-green-fg\">-&gt; 1026</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pandas/io/parsers/readers.py:620</span>, in <span class=\"ansi-cyan-fg\">_read</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">    617</span> _validate_names(kwds<span style=\"color:rgb(98,98,98)\">.</span>get(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">names</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>))\n<span class=\"ansi-green-fg ansi-bold\">    619</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Create the parser.</span>\n<span class=\"ansi-green-fg\">--&gt; 620</span> parser <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TextFileReader</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    622</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> chunksize <span style=\"font-weight:bold;color:rgb(175,0,255)\">or</span> iterator:\n<span class=\"ansi-green-fg ansi-bold\">    623</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> parser\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1620</span>, in <span class=\"ansi-cyan-fg\">TextFileReader.__init__</span><span class=\"ansi-blue-fg\">(self, f, engine, **kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1617</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>options[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">has_index_names</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> kwds[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">has_index_names</span><span style=\"color:rgb(175,0,0)\">\"</span>]\n<span class=\"ansi-green-fg ansi-bold\">   1619</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles: IOHandles <span style=\"color:rgb(98,98,98)\">|</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg\">-&gt; 1620</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_engine <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_make_engine</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">f</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">engine</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1880</span>, in <span class=\"ansi-cyan-fg\">TextFileReader._make_engine</span><span class=\"ansi-blue-fg\">(self, f, engine)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1878</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> mode:\n<span class=\"ansi-green-fg ansi-bold\">   1879</span>         mode <span style=\"color:rgb(98,98,98)\">+</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">-&gt; 1880</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_handle</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1881</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">f</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1882</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mode</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1883</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1884</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">compression</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">compression</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1885</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">memory_map</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">memory_map</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">False</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1886</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">is_text</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">is_text</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1887</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">errors</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">encoding_errors</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">strict</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1888</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">storage_options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">get</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">storage_options</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">   1889</span> <span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1890</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">   1891</span> f <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles<span style=\"color:rgb(98,98,98)\">.</span>handle\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pandas/io/common.py:873</span>, in <span class=\"ansi-cyan-fg\">get_handle</span><span class=\"ansi-blue-fg\">(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)</span>\n<span class=\"ansi-green-fg ansi-bold\">    868</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(handle, <span style=\"color:rgb(0,135,0)\">str</span>):\n<span class=\"ansi-green-fg ansi-bold\">    869</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Check whether the filename is to be opened in binary mode.</span>\n<span class=\"ansi-green-fg ansi-bold\">    870</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Binary mode does not support 'encoding' and 'newline'.</span>\n<span class=\"ansi-green-fg ansi-bold\">    871</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> ioargs<span style=\"color:rgb(98,98,98)\">.</span>encoding <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> ioargs<span style=\"color:rgb(98,98,98)\">.</span>mode:\n<span class=\"ansi-green-fg ansi-bold\">    872</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># Encoding</span>\n<span class=\"ansi-green-fg\">--&gt; 873</span>         handle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">open</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    874</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">handle</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    875</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">ioargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">mode</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    876</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">ioargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    877</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">errors</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">errors</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    878</span> <span class=\"ansi-yellow-bg\">            </span><span class=\"ansi-yellow-bg\">newline</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    879</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    880</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    881</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># Binary mode</span>\n<span class=\"ansi-green-fg ansi-bold\">    882</span>         handle <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">open</span>(handle, ioargs<span style=\"color:rgb(98,98,98)\">.</span>mode)\n\n<span class=\"ansi-red-fg\">FileNotFoundError</span>: [Errno 2] No such file or directory: 'data/zeckenstiche.csv'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#33b7c4f8 .cell execution_count=4}\n``` {.python .cell-code}\nzeckenstiche.plot(\"x\", \"y\", kind = \"scatter\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">zeckenstiche</span><span style=\"color:rgb(98,98,98)\">.</span>plot(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">x</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">y</span><span style=\"color:rgb(175,0,0)\">\"</span>, kind <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">scatter</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Statische Karte aus GeoDataFrame\n\nUm aus *GeoDataFrames* Karten zu machen verwendet man ebenfalls die `.plot()` Methode. Um wirklich schöne Karten mit Python herzustellen braucht man viel Übung. Für eine schnelle Visualisierung reicht aber die `.plot()` Methode.\n\n::: {#f5d7a5bd .cell execution_count=5}\n``` {.python .cell-code}\nimport geopandas as gpd\n\nzeckenstiche = gpd.read_file(\"data/zeckenstiche.gpkg\")\nwald = gpd.read_file(\"data/wald.gpkg\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">DataSourceError</span>                           Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">geopandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">gpd</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> zeckenstiche <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">gpd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_file</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">data/zeckenstiche.gpkg</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> wald <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>read_file(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">data/wald.gpkg</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:294</span>, in <span class=\"ansi-cyan-fg\">_read_file</span><span class=\"ansi-blue-fg\">(filename, bbox, mask, columns, rows, engine, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    291</span>             from_bytes <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg ansi-bold\">    293</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">pyogrio</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg\">--&gt; 294</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read_file_pyogrio</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    295</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">rows</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">rows</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span>\n<span class=\"ansi-green-fg ansi-bold\">    296</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    298</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fiona</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg ansi-bold\">    299</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> pd<span style=\"color:rgb(98,98,98)\">.</span>api<span style=\"color:rgb(98,98,98)\">.</span>types<span style=\"color:rgb(98,98,98)\">.</span>is_file_like(filename):\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:547</span>, in <span class=\"ansi-cyan-fg\">_read_file_pyogrio</span><span class=\"ansi-blue-fg\">(path_or_bytes, bbox, mask, rows, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    538</span>     warnings<span style=\"color:rgb(98,98,98)\">.</span>warn(\n<span class=\"ansi-green-fg ansi-bold\">    539</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> and </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">ignore_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keywords are deprecated, and </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    540</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">will be removed in a future release. You can use the </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keyword </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    543</span>         stacklevel<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>,\n<span class=\"ansi-green-fg ansi-bold\">    544</span>     )\n<span class=\"ansi-green-fg ansi-bold\">    545</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> kwargs<span style=\"color:rgb(98,98,98)\">.</span>pop(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">--&gt; 547</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">pyogrio</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_dataframe</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_bytes</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/geopandas.py:261</span>, in <span class=\"ansi-cyan-fg\">read_dataframe</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, fid_as_index, use_arrow, on_invalid, arrow_to_pandas_kwargs, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    256</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    257</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For arrow, datetimes are read as is.</span>\n<span class=\"ansi-green-fg ansi-bold\">    258</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For numpy IO, datetimes are read as string values to preserve timezone info</span>\n<span class=\"ansi-green-fg ansi-bold\">    259</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># as numpy does not directly support timezones.</span>\n<span class=\"ansi-green-fg ansi-bold\">    260</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">datetime_as_string</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span> result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">read_func</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    262</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    263</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    264</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    265</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    266</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    267</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">gdal_force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    268</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    269</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    270</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    271</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    272</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    273</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    274</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    275</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    276</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fid_as_index</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    277</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    278</span> <span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    280</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    281</span>     meta, table <span style=\"color:rgb(98,98,98)\">=</span> result\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/raw.py:196</span>, in <span class=\"ansi-cyan-fg\">read</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, return_fids, datetime_as_string, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     56</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Read OGR data source into numpy arrays.</span>\n<span class=\"ansi-green-fg ansi-bold\">     57</span> \n<span class=\"ansi-green-fg ansi-bold\">     58</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">IMPORTANT: non-linear geometry types (e.g., MultiSurface) are converted</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    191</span> \n<span class=\"ansi-green-fg ansi-bold\">    192</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    194</span> dataset_kwargs <span style=\"color:rgb(98,98,98)\">=</span> _preprocess_options_key_value(kwargs) <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> kwargs <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> {}\n<span class=\"ansi-green-fg\">--&gt; 196</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">ogr_read</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    197</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">get_vsi_path_or_buffer</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    198</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    199</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    200</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    201</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    202</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    203</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    204</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(175,0,255)\" class=\"ansi-yellow-bg\">or</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    205</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    206</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    207</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">_mask_to_wkb</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    208</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    209</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    210</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    211</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">return_fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    212</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    213</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    214</span> <span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:1239</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_read</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:219</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_open</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">DataSourceError</span>: data/zeckenstiche.gpkg: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n**Einfache Plots ohne anpassung:**\n\n::: {#cde42244 .cell execution_count=6}\n``` {.python .cell-code}\nwald.plot()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">wald</span><span style=\"color:rgb(98,98,98)\">.</span>plot()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'wald' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Anpassung der Plot Grösse:**\n\n::: {#554c91db .cell execution_count=7}\n``` {.python .cell-code}\nwald.plot(figsize = (5,5))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">wald</span><span style=\"color:rgb(98,98,98)\">.</span>plot(figsize <span style=\"color:rgb(98,98,98)\">=</span> (<span style=\"color:rgb(98,98,98)\">5</span>,<span style=\"color:rgb(98,98,98)\">5</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'wald' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Choroplethenkarte Karte**\n\n::: {#259689f5 .cell execution_count=8}\n``` {.python .cell-code}\nfrom matplotlib.colors import ListedColormap\n\nmy_cmap = ListedColormap([\"green\",\"lightgrey\"])\nwald.plot(column = \"Wald_text\", legend = True, cmap = my_cmap)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">colors</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> ListedColormap\n<span class=\"ansi-green-fg ansi-bold\">      3</span> my_cmap <span style=\"color:rgb(98,98,98)\">=</span> ListedColormap([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">green</span><span style=\"color:rgb(175,0,0)\">\"</span>,<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">lightgrey</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span class=\"ansi-yellow-bg\">wald</span><span style=\"color:rgb(98,98,98)\">.</span>plot(column <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Wald_text</span><span style=\"color:rgb(175,0,0)\">\"</span>, legend <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, cmap <span style=\"color:rgb(98,98,98)\">=</span> my_cmap)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'wald' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Mehrere Layers:**\n\n::: {#12d48bce .cell execution_count=9}\n``` {.python .cell-code}\nbase = wald.plot(column = \"Wald_text\", legend = True, cmap = my_cmap)\nzeckenstiche.plot(color = \"Red\", ax = base)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> base <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">wald</span><span style=\"color:rgb(98,98,98)\">.</span>plot(column <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Wald_text</span><span style=\"color:rgb(175,0,0)\">\"</span>, legend <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, cmap <span style=\"color:rgb(98,98,98)\">=</span> my_cmap)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> zeckenstiche<span style=\"color:rgb(98,98,98)\">.</span>plot(color <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Red</span><span style=\"color:rgb(175,0,0)\">\"</span>, ax <span style=\"color:rgb(98,98,98)\">=</span> base)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'wald' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Interaktive Karten aus GeoDataFrame\n\nWeitere Informationen dazu findet ihr hier: <https://geopandas.org/docs/user_guide/interactive_mapping.html>\n\nVollautomatisch, ohne Anpassungen:\n\n::: {#36083afb .cell execution_count=10}\n``` {.python .cell-code}\nzeckenstiche.explore()\n```\n:::\n\n\nZeckenstiche Rot eingefärbt:\n\n::: {#f1cc7755 .cell execution_count=11}\n``` {.python .cell-code}\nzeckenstiche.explore(color = \"red\")\n```\n:::\n\n\nZeckenstiche nach `\"accuracy\"` eingefärbt:\n\n::: {#03377ef5 .cell execution_count=12}\n``` {.python .cell-code}\nzeckenstiche.explore(column = \"accuracy\")\n```\n:::\n\n\nWald nach `\"Wald_text\"` eingefärbt (beachte, dass ich `my_cmap` weiter oben erstellt habe!):\n\n::: {#43d29a39 .cell execution_count=13}\n``` {.python .cell-code}\nwald.explore(column = \"Wald_text\", cmap = my_cmap)\n```\n:::\n\n\nZwei übereinander gelagerte Layers:\n\n::: {#92e6fc29 .cell execution_count=14}\n``` {.python .cell-code}\nbase = wald.explore(column = \"Wald_text\", cmap = my_cmap)\nzeckenstiche.explore(m = base, color = \"red\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> base <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">wald</span><span style=\"color:rgb(98,98,98)\">.</span>explore(column <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Wald_text</span><span style=\"color:rgb(175,0,0)\">\"</span>, cmap <span style=\"color:rgb(98,98,98)\">=</span> my_cmap)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> zeckenstiche<span style=\"color:rgb(98,98,98)\">.</span>explore(m <span style=\"color:rgb(98,98,98)\">=</span> base, color <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">red</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'wald' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Anhang 2: Geodaten visualisieren {#sec-geoviz}\n\nIn folgenden Beispielen zeigen wir noch ein paar einfache Wege, wie ihr die Zeckenstichdaten visualisieren könnt.\n\n::: {#4df59cd7 .cell execution_count=15}\n``` {.python .cell-code}\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport descartes\n\nwald = gpd.read_file(\"data/wald.gpkg\")\nzeckenstiche_full = pd.read_csv(\"data/zeckenstiche_full.csv\")\n\ngeom = gpd.points_from_xy(zeckenstiche_full['x'], zeckenstiche_full['y'])\n\nzeckenstiche_gpd = gpd.GeoDataFrame(\n    zeckenstiche_full,\n    geometry=geom,\n    crs = 2056)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">DataSourceError</span>                           Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">descartes</span>\n<span class=\"ansi-green-fg\">----&gt; 6</span> wald <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">gpd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_file</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">data/wald.gpkg</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> zeckenstiche_full <span style=\"color:rgb(98,98,98)\">=</span> pd<span style=\"color:rgb(98,98,98)\">.</span>read_csv(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">data/zeckenstiche_full.csv</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span> geom <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>points_from_xy(zeckenstiche_full[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">x</span><span style=\"color:rgb(175,0,0)\">'</span>], zeckenstiche_full[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">y</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:294</span>, in <span class=\"ansi-cyan-fg\">_read_file</span><span class=\"ansi-blue-fg\">(filename, bbox, mask, columns, rows, engine, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    291</span>             from_bytes <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg ansi-bold\">    293</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">pyogrio</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg\">--&gt; 294</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read_file_pyogrio</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    295</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">rows</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">rows</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span>\n<span class=\"ansi-green-fg ansi-bold\">    296</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    298</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fiona</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg ansi-bold\">    299</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> pd<span style=\"color:rgb(98,98,98)\">.</span>api<span style=\"color:rgb(98,98,98)\">.</span>types<span style=\"color:rgb(98,98,98)\">.</span>is_file_like(filename):\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:547</span>, in <span class=\"ansi-cyan-fg\">_read_file_pyogrio</span><span class=\"ansi-blue-fg\">(path_or_bytes, bbox, mask, rows, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    538</span>     warnings<span style=\"color:rgb(98,98,98)\">.</span>warn(\n<span class=\"ansi-green-fg ansi-bold\">    539</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> and </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">ignore_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keywords are deprecated, and </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    540</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">will be removed in a future release. You can use the </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keyword </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    543</span>         stacklevel<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>,\n<span class=\"ansi-green-fg ansi-bold\">    544</span>     )\n<span class=\"ansi-green-fg ansi-bold\">    545</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> kwargs<span style=\"color:rgb(98,98,98)\">.</span>pop(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">--&gt; 547</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">pyogrio</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_dataframe</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_bytes</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/geopandas.py:261</span>, in <span class=\"ansi-cyan-fg\">read_dataframe</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, fid_as_index, use_arrow, on_invalid, arrow_to_pandas_kwargs, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    256</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    257</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For arrow, datetimes are read as is.</span>\n<span class=\"ansi-green-fg ansi-bold\">    258</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For numpy IO, datetimes are read as string values to preserve timezone info</span>\n<span class=\"ansi-green-fg ansi-bold\">    259</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># as numpy does not directly support timezones.</span>\n<span class=\"ansi-green-fg ansi-bold\">    260</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">datetime_as_string</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span> result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">read_func</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    262</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    263</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    264</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    265</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    266</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    267</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">gdal_force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    268</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    269</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    270</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    271</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    272</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    273</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    274</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    275</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    276</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fid_as_index</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    277</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    278</span> <span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    280</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    281</span>     meta, table <span style=\"color:rgb(98,98,98)\">=</span> result\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/raw.py:196</span>, in <span class=\"ansi-cyan-fg\">read</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, return_fids, datetime_as_string, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     56</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Read OGR data source into numpy arrays.</span>\n<span class=\"ansi-green-fg ansi-bold\">     57</span> \n<span class=\"ansi-green-fg ansi-bold\">     58</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">IMPORTANT: non-linear geometry types (e.g., MultiSurface) are converted</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    191</span> \n<span class=\"ansi-green-fg ansi-bold\">    192</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    194</span> dataset_kwargs <span style=\"color:rgb(98,98,98)\">=</span> _preprocess_options_key_value(kwargs) <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> kwargs <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> {}\n<span class=\"ansi-green-fg\">--&gt; 196</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">ogr_read</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    197</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">get_vsi_path_or_buffer</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    198</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    199</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    200</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    201</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    202</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    203</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    204</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(175,0,255)\" class=\"ansi-yellow-bg\">or</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    205</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    206</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    207</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">_mask_to_wkb</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    208</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    209</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    210</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    211</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">return_fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    212</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    213</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    214</span> <span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:1239</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_read</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:219</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_open</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">DataSourceError</span>: data/wald.gpkg: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n### Kernel Density Plot\n\nMit der Erweiterung `seaborn` lassen sich mit wenigen Zeilen Code eine *Kernel Density* rechnen und visualisieren. Siehe nachstehenden Code:\n\n::: {#75e700eb .cell execution_count=16}\n``` {.python .cell-code}\nimport seaborn as sns\n\nf, ax = plt.subplots(1, figsize=(6, 6))\nwald.boundary.plot(linewidth=0.1, ax=ax)\nzeckenstiche_gpd.plot(color='red', linewidth=0.1, ax=ax)\n\nsns.kdeplot(x = zeckenstiche_full.x, y= zeckenstiche_full.y,shade = False,n_levels = 10, cmap = \"viridis\", ax = ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">seaborn</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sns</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> f, ax <span style=\"color:rgb(98,98,98)\">=</span> plt<span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>, figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">6</span>, <span style=\"color:rgb(98,98,98)\">6</span>))\n<span class=\"ansi-green-fg ansi-bold\">      4</span> wald<span style=\"color:rgb(98,98,98)\">.</span>boundary<span style=\"color:rgb(98,98,98)\">.</span>plot(linewidth<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0.1</span>, ax<span style=\"color:rgb(98,98,98)\">=</span>ax)\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'seaborn'</pre>\n```\n:::\n\n:::\n:::\n\n\n### Hintergrundkarte\n\nMit der Erweiterung `contextily` kann man sehr schnell und einfach Hintergrundkarten in den Plot einbinden. Dafür muss das *GeoDataFrame* vorher aber in WGS84 Koordinaten (EPSG 3857) konvertiert werden (mit `to_crs`, s.u.).\n\n::: {#ca99cdb6 .cell execution_count=17}\n``` {.python .cell-code}\nimport contextily as ctx\n\nf, ax = plt.subplots(1, figsize=(6, 6))\nzeckenstiche_gpd.to_crs(epsg = 3857).plot(ax = ax)\nctx.add_basemap(ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">contextily</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ctx</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> f, ax <span style=\"color:rgb(98,98,98)\">=</span> plt<span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>, figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">6</span>, <span style=\"color:rgb(98,98,98)\">6</span>))\n<span class=\"ansi-green-fg ansi-bold\">      4</span> zeckenstiche_gpd<span style=\"color:rgb(98,98,98)\">.</span>to_crs(epsg <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">3857</span>)<span style=\"color:rgb(98,98,98)\">.</span>plot(ax <span style=\"color:rgb(98,98,98)\">=</span> ax)\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'contextily'</pre>\n```\n:::\n\n:::\n:::\n\n\n### KDE mit Hintergrundkarte\n\nKernel Denisty und Hintergrundkarte können auch kombiniert werden:\n\n::: {#b94dacca .cell execution_count=18}\n``` {.python .cell-code}\nlat = zeckenstiche_gpd.to_crs(epsg = 3857).geometry.x\nlng = zeckenstiche_gpd.to_crs(epsg = 3857).geometry.y\n\nf, ax = plt.subplots(1, figsize=(6, 6))\n\nsns.kdeplot(x = lat,y = lng,shade = False,n_levels = 25, cmap = \"viridis\", ax = ax)\nctx.add_basemap(ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> lat <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">zeckenstiche_gpd</span><span style=\"color:rgb(98,98,98)\">.</span>to_crs(epsg <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">3857</span>)<span style=\"color:rgb(98,98,98)\">.</span>geometry<span style=\"color:rgb(98,98,98)\">.</span>x\n<span class=\"ansi-green-fg ansi-bold\">      2</span> lng <span style=\"color:rgb(98,98,98)\">=</span> zeckenstiche_gpd<span style=\"color:rgb(98,98,98)\">.</span>to_crs(epsg <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">3857</span>)<span style=\"color:rgb(98,98,98)\">.</span>geometry<span style=\"color:rgb(98,98,98)\">.</span>y\n<span class=\"ansi-green-fg ansi-bold\">      4</span> f, ax <span style=\"color:rgb(98,98,98)\">=</span> plt<span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>, figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">6</span>, <span style=\"color:rgb(98,98,98)\">6</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche_gpd' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "10_Anhang_files"
    ],
    "filters": [],
    "includes": {}
  }
}