{
  "hash": "b47816ea76273c880f97582a43f439d3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\noutput: false\necho: false                      # set to true to show solution\ncode-fold: true                  # set to true to show solution\ncode-summary: \"Musterlösung\"    \n---\n\n# Übung 15\n\n## Übung 15.1 {#sec-ex-import-wald}\n\nLade das File \"wald.gpkg\" (siehe @tbl-datensaetze) herunter und speichere es in deiner Workings Directory. Importiere den Datensatz und speichere ihn in der Variable `wald`. \n\nSchau dir `wald` an (mit `type`, `.plot()` etc.)\n\n\n\n## Übung 15.2 {#sec-ex-spatialjoin}\n\nFühre einen SpatialJoin zwischen `wald` und `zeckenstiche` durch. Vertausche die Reihenfolge (`left_df`, `right_df`) und schaue dir den Output an. Wodurch unterscheiden sich die beiden outputs? Was sagt dir das über die Funktionsweise von `sjoin`?\n\n:::{.callout-note}\n## Wichtig!\n\nMelde dich bei den Betreuern wenn der *SpatialJoin* bei dir nicht funktioniert und du eine Fehlermeldung bekommst.\n:::\n\n\n\n## Übung 15.3 {#sec-ex-count}\n\nFühre nun den SpatialJoin aus @sec-ex-spatialjoin in der Reihenfolge aus, der dir am sinnvollsten erscheint. Weise den Output dieser Operation der Variabel `zeckenstiche_join` zu.\n\nNutze nun die dazugewonnene Spalte `Wald_text` um die Anzahl Zeckenstich-Meldungen *im Wald* zu zählen. Dazu musst du wie folgt vorgehen: \n\n1. Entsprechende Spalte selektieren (siehe @sec-ex-sel-col)\n2. Werte in der Spalte mit \"ja\" vergleichen\n3. Anzahl `True` mit `sum()` zählen (`True` entspricht immer `1`, `False` entspricht immer `0`)\n\n\n\n## Übung 15.4\n\nBerechne nun *Anteil* der Zeckenstiche im Wald (gemessen an der Anzahl Zeckenstich-Meldungen total). Weise den Output der Variabel `anteil_wald` zu.\n\n\n\n",
    "supporting": [
      "7_Uebung_15_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}