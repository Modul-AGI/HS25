{
  "hash": "8c64d6c4bde9636d8ba893c0e78de3a0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\noutput: false\necho: true                       # set to true to show solution\ncode-fold: true                  # set to true to show solution\ncode-summary: \"Musterlösung\"    \n---\n\n# Übung 7\n\n## Übung 7.1 {#sec-ex-ifelse-gruezi2}\n\nErstelle eine neue Funktion `gruezi3` die `gruezi` (aus @sec-functions1-ex-gruezi) um einem weiteren Parameter `uhrzeit` erweitert. Die Funktion soll vor 18 Uhr (`uhrzeit < 18`) mit \"Guten Tag\" und sonst mit \"Guten Abend\" grüssen. Um es einfach zu halten: Die Zeitangbe muss in Dezimalzahlen erfolgen (also nicht `20:15 Uhr` sondern `20.25`).\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef gruezi3(nachname, uhrzeit):\n    if(uhrzeit < 18):\n        grussform = \"Tag\"\n    else:\n        grussform = \"Abend\"\n\n    return \"Guten \" + grussform + \" \" + nachname\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\n# die Lösung sollte etwa folgendermasssen funktionieren:\n\ngruezi3(\"Guido\", uhrzeit = 21)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'Guten Abend Guido'\n```\n:::\n:::\n\n\n## Übung 7.2\n\nErweitere die Funktion `gruezi2` so, dass zwischen folgende Uhrzeiten berücksichtigt werden:\n\n| Uhrzeit  | Begrüssungsform | \n|:---|:---|:---|\n| 5 bis 11 Uhr  | Guten Morgen |\n| 11 bis 18 Uhr  | Guten Tag |\n| 18 bis 22 Uhr  | Guten Abend |\n| 22 bis 5 Uhr  | Gute Nacht |\n\n: Uhrzeiten und ihre Begrüssungsformen {#tbl-begruesung}\n\nDas Problem ist etwas schwierig zu Packen weil wir die \"von - bis\" Uhrzeiten in eine Ja/Nein Logik überführen müssen. Überlege dir zuerst eine Ausführungslogik und schreibe danach die `if`, `elif`und `else` Operationen. Im Dropdown unten ist unser Vorschlag.\n\n:::{.callout-note collapse=\"true\"}\n\n![](figures/if-else2.png)\n\n:::\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef gruezi2(nachname, anrede, uhrzeit):\n    if(uhrzeit < 5):\n        was = \"Gute Nacht\"\n    elif(uhrzeit < 11):\n        was = \"Guten Morgen\"\n    elif(uhrzeit < 18):\n        was = \"Guten Tag\"\n    elif(uhrzeit < 22):\n        was = \"Guten Abend\"\n    else:\n        was = \"Gute Nacht\"\n\n    return was + \", \" + anrede + \" \"+ nachname\n```\n:::\n\n\nTeste die Funktion mit verschiedenen Optionen um sicherzustellen, dass sie richtig funktioniert.\n\n## Übung 7.2\n\nErweitere die Funktion `bmi` aus @sec-ex-functions-bmi so, dass statt dem berechneten BMI der \"Nutritional status\" aufgrund der [WHO Klassifizierung](https://www.euro.who.int/en/health-topics/disease-prevention/nutrition/a-healthy-lifestyle/body-mass-index-bmi) ausgegeben wird:\n\n| BMI  | Nutritional status | \n|:---|:---|\n| Below 18.5  | Underweight |\n| 18.5–24.9  | Normal weight |\n| 25.0–29.9  | Pre-obesity |\n| 30.0–34.9  | Obesity class I |\n| 35.0–39.9  | Obesity class II |\n| Above 40  | Obesity class III |\n\n: WHO Nutritional status {#tbl-who-bmi}\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef bmi2(groesse_m, gewicht_kg):\n    bmi = gewicht_kg / (groesse_m * groesse_m)\n    if(bmi < 18.5):\n        cat = \"Underweight\"\n    elif(bmi <= 24.9):\n        cat = \"Normal weight\"\n    elif(bmi <= 29.9):\n        cat = \"Pre-obesity\"\n    elif(bmi <= 34.9):\n        cat = \"Obesity class I\"\n    elif(bmi <= 39.9):\n        cat = \"Obesity class II\"\n    else:\n        cat = \"Obesity class III\"\n    return \"Who classification: \" + cat\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"false\"}\n# Der Output sollte etwa folgedermassen aussehen\nbmi2(1.7, 70)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'Who classification: Normal weight'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "9_Uebung_7_files"
    ],
    "filters": []
  }
}